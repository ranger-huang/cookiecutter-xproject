node {
    //def mvnHome

    stage('Preparation') {
        env.IMAGE_GROUP='xlock_server'
        env.REGISTRY="registry.cn-hangzhou.aliyuncs.com"
        env.REGISTRY_CREDENTIALS='694c3c4a-c81e-4375-a829-0143107c4c9e'
        env.BACKEND_IMAGE_NAME='xlockxpay_django'
        env.BACKEND_IMAGE_VERSION='0.1.13'
        env.WEBUI_IMAGE_NAME='xlock_webui_consumer'
        env.WEBUI_IMAGE_VERSION='0.1.10'
        env.WEBUI_BUILD_VERSION='0.0.19'
        env.PRODUCTION_VERSION='1.0.0'
        env.GIT_CREDENTIALS_ID='6039a2ab-e8b6-4c72-90d3-9d7ec1c8b222'
        env.REGISTRY_CREDENTIALS_ID='694c3c4a-c81e-4375-a829-0143107c4c9e'

        parallel (
                "backend_checkout": {
                    checkout(changelog: true, poll: true,
                            scm: [$class: 'GitSCM', branches: [[name: '*/master']],
                                  browser: [$class: 'GitLab', repoUrl: 'https://coding.net/u/bi-ci/p/xlock_xpay/git', version: '3.1'],
                                  doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'backend']],
                                  submoduleCfg: [],
                                  userRemoteConfigs: [[credentialsId: env.GIT_CREDENTIALS_ID, url: 'https://git.coding.net/bi-ci/xlock_xpay.git']]])
                    configFileProvider([configFile(fileId: '26049ff8-d1d6-42fb-9e30-98f7cd027a32', targetLocation: 'backend/playbook/inventory-file.ini')]) {
                        // some block
                    }

                },
                "backend_image": {
                    docker.withRegistry('https://${REGISTRY}', env.REGISTRY_CREDENTIALS_ID) {
                        image = docker.image('${IMAGE_GROUP}/${BACKEND_IMAGE_NAME}:${IMAGE_VERSION}')
                        image.pull()
                    }
                    sh 'docker tag ${REGISTRY}/${IMAGE_GROUP}/${BACKEND_IMAGE_NAME}:${IMAGE_VERSION}-test ${BACKEND_IMAGE_NAME}:${BACKEND_IMAGE_VERSION}-test'
                    sh 'docker tag ${REGISTRY}/${IMAGE_GROUP}/${BACKEND_IMAGE_NAME}:${IMAGE_VERSION}-test ${BACKEND_IMAGE_NAME}:latest-test'
                    sh 'docker rmi ${REGISTRY}/${IMAGE_GROUP}/${BACKEND_IMAGE_NAME}:${IMAGE_VERSION}-test'
                },
                "webui_checkout": {
                    checkout(changelog: true, poll: true,
                            scm: [$class: 'GitSCM', branches: [[name: '*/master']],
                                  browser: [$class: 'GitLab', repoUrl: 'https://coding.net/u/bi-ci/p/xlock_webui_consumer/git', version: '3.1'],
                                  doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'webui']],
                                  submoduleCfg: [],
                                  userRemoteConfigs: [[credentialsId: env.GIT_CREDENTIALS_ID, url: 'https://git.coding.net/bi-ci/xlock_webui_consumer.git']]])
                    configFileProvider([configFile(fileId: '26049ff8-d1d6-42fb-9e30-98f7cd027a32', targetLocation: 'webui/playbook/inventory-file.ini')]) {
                        // some block
                    }
                },
                "webui_image": {
                    docker.withRegistry('https://${REGISTRY}', env.REGISTRY_CREDENTIALS_ID) {
                        image = docker.image('${IMAGE_GROUP}/${WEBUI_IMAGE_NAME}:${IMAGE_VERSION}')
                        image.pull()
                    }
                    sh 'docker tag ${REGISTRY}/${IMAGE_GROUP}/${WEBUI_IMAGE_NAME}:${IMAGE_VERSION} ${WEBUI_IMAGE_NAME}:${WEBUI_IMAGE_VERSION}'
                    sh 'docker tag ${REGISTRY}/${IMAGE_GROUP}/${WEBUI_IMAGE_NAME}:${IMAGE_VERSION} ${WEBUI_IMAGE_NAME}:latest-test'
                    sh 'docker rmi ${REGISTRY}/${IMAGE_GROUP}/${WEBUI_IMAGE_NAME}:${IMAGE_VERSION}'
                }
        )

    }
    stage('Build') {

        parallel (
                "backend": {

                },
                "webui": {
                    build job: 'xlock_xpay/webui_consumer/build', parameters: [
                            string(name: 'WEBUI_BUILD_VERSION', value: '${WEBUI_BUILD_VERSION}'),
                            string(name: 'CLEAN_NODE_MODULES', value: 'n'),
                            string(name: 'IMAGE_VERSION', value: '${WEBUI_IMAGE_VERSION}'),
                            string(name: 'UPLOAD_CDN', value: 'n')
                    ]
                }
        )
    }

    stage('Test') {
        // All test
        // UT
        // FT
        // AT
        // IT
        parallel (
                "backend": {
                    build job: 'xlock_xpay/test', parameters: [
                            string(name: 'DJANGO_SETTINGS_MODULE', value: 'xlock_conf.settings.test_ci'),
                            string(name: 'IMAGE_VERSION', value: '${BACKEND_IMAGE_VERSION}')
                    ]
                },
                "webui": {
                    build job: 'xlock_xpay/webui_consumer/test', parameters: [
                            string(name: 'WEBUI_BUILD_VERSION', value: '${WEBUI_BUILD_VERSION}'),
                            string(name: 'CLEAN_NODE_MODULES', value: 'n'),
                            string(name: 'IMAGE_VERSION', value: '${WEBUI_IMAGE_VERSION}'),
                            string(name: 'UPLOAD_CDN', value: 'n')
                    ]
                }
        )
    }
    stage('Results') {
        junit allowEmptyResults: true, testResults: '**/test-reports/junit.xml'
        //archive 'target/*.jar'
    }
    stage('Release') {
        docker.build
        // Tag SCM Version && push --tags $remote $branch
        // Tag Docker Image Version && Push Docker Image
    }
}